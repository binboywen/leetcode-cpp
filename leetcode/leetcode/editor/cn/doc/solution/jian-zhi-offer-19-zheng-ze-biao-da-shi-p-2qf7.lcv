**定义：**

- **`dp[i][j]`**：`s` 的前 `i` 个字符和 `p` 的前 `j` 个字符是否能匹配（不包括第 `i` 个字符和第 `j` 个字符）

- **`dp[s.size()][p.size()]`** 即所求

**转移方程推导：**

1. **当 `p[j - 1]` 为字母时：**

   `dp[i][j] = (dp[i - 1][j - 1]) && (s[i - 1] == p[j - 1])`

2. **当 `p[j - 1] == '*'` 时：**
   - 当 `*` 匹配了 `0` 次时：
     `dp[i][j] = dp[i][j - 2]`

   - 当 `*` 匹配了 `1` 次时：
     `dp[i][j] = (dp[i - 1][j]) && (s[i - 1] == p[j - 2])`

   - 当 `*` 匹配了 `2` 次时：
     `dp[i][j] = (dp[i - 2][j]) && (s[i - 2] == p[j - 2])`

   - 依次类推，将将匹配 `n` 次可以看作为由进行了 `n` 次的 "匹配 1 次" 的操作，则可以得到：

     `dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && s[i - 1] == p[j - 2])`

> 这里说明一下为什么当 `*` 匹配了 `1` 次时为 `dp[i][j] = (dp[i - 1][j]) && (s[i - 1] == p[j - 2])`
>
> 其实这里包含了两步：
>
> 1. `dp[i][j] = dp[i - 1][j - 2] && (s[i - 1] == p[j - 2])`
>
> 2. 而 `dp[i - 1][j - 2] = dp[i - 1][j]`，相对于 `dp[i - 1][j - 2]` 来说，这里的 `*`(也就是 `p[j - 1]`) 匹配了 `0` 次
>
> 3. 两者合并即为：`dp[i][j] = (dp[i - 1][j]) && (s[i - 1] == p[j - 2])`
>
> 这种思路同意应用于 `*` 匹配多次的情况

3. **当 `p[j - 1] == '.'` 时**：

   无论什么情况，`p[j - 1]` 一定会和 s 中的某个字符成功匹配

4. 将第三种情况加入到前两种情况可以得到最后的转移方程：

* python

```python
if p[j - 1] != '*':
    dp[i][j] = (dp[i - 1][j - 1]) && (s[i - 1] == p[j - 1] || p[j - 1] == '.')

else:
    dp[i][j] = (dp[i][j - 2]) || (dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'))
```

5. 剩下的就是注意边界的问题

**代码实现：**

* c++

```c++
class Solution {
public:
    bool isMatch(string s, string p) {
        int n = s.size(), m = p.size();
        int dp[n + 5][m + 5];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        for(int i = 0; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if(p[j - 1] != '*') {
                    if(i >= 1 && (s[i - 1] == p[j - 1] || p[j - 1] == '.')) dp[i][j] = dp[i - 1][j - 1];
                }
                else {
                    if(j >= 2) dp[i][j] |= dp[i][j - 2];
                    if(i >= 1 && j >= 2 && (s[i - 1] == p[j - 2] || p[j - 2] == '.')) dp[i][j] |= dp[i - 1][j];
                }
            }
        }
        return dp[n][m];
    }
};
```

