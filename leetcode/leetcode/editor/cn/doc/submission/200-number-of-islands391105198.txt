class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size() == 0) {
            return 0;
        }
        int row = grid.size();
        int column = grid[0].size();
        int ret = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                if (grid[i][j] == '1') {
                    ret++;
                    infect(grid,i,j,row,column);
                }
            }
        }
        return ret;
    }
    void infect(vector<vector<char>> &grid, int i , int j, int row, int column) {
        if (i < 0 || i >= row || j < 0 || j >= column || grid[i][j] != '1') {
            return;
        }
        grid[i][j] = '2';
        infect(grid, i + 1, j, row, column);
        infect(grid, i, j + 1, row, column);
        infect(grid, i - 1, j, row, column);
        infect(grid, i, j -1, row, column);

    }

};
//runtime:32 ms
//memory:11.9 MB
