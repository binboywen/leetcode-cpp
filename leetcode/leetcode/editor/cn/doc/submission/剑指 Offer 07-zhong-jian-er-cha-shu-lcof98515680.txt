/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || inorder == null || preorder.length != inorder.length || preorder.length < 1){
            return null;
        }
        TreeNode root = reCons(preorder,0,preorder.length - 1, inorder, 0,inorder.length);
        return root;
    }
    public TreeNode reCons(int [] pre, int startPre, int endPre, int [] in, int startIn, int endIn){
        if(startPre > endPre || startIn > endIn){
            return null;
        }
        TreeNode root = new TreeNode(pre[startPre]);
        for(int i = 0; i <= endIn; i++){
            if(pre[startPre] == in[i]){
                root.left = reCons(pre, startPre + 1, startPre + i - startIn, in, startIn, i - 1);
                root.right = reCons(pre, startPre + i - startIn + 1, endPre, in, i + 1, endIn);
                break;
            }
        }
        return root;
    }
}
//runtime:5 ms
//memory:39.4 MB
