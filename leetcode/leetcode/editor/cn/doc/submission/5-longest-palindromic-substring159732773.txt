class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size() < 1) return "";
        int start = 0, end = 0;
        for(int i = 0; i < s.size(); i++){
            int len1 = longestSubString(s, i, i);
            int len2 = longestSubString(s, i, i + 1);
            int maxLen = max(len1,len2);
            if(maxLen > end - start){
                start = i - (maxLen - 1)/2;
                end = i + maxLen/2;
            }
        }
        return s.substr(start, end - start + 1);
    }
    int longestSubString(string s, int i, int j){
        int L = i;
        int R = j;
        while(L >= 0 && R < s.size() && s[L] == s[R]){
            L--;
            R++;
        }
        return R - L - 1;
    }
};
//runtime:96 ms
//memory:225.9 MB
